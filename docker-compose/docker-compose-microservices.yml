version: "3.8"
services:
  group-service-database:
    image: postgres:13 # name of image to pull from docker hub
    container_name: group-service-database # name of container we'll see in docker ps
    networks:
      - backend-network
    environment:
      POSTGRES_USER: group-service
      POSTGRES_PASSWORD: group-service
      POSTGRES_DB: group-service
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "group-service", "-d", "group-service" ] # user, db
      interval: 30s # wait 30 seconds, try connecting
      timeout: 30s # if cannot connect, wait timeout before retrying
      retries: 3
    volumes: # need to see in more details
      - postgresql-db-group-service:/var/lib/postgresql/data # careful, do not add a space in between
      - ./data/groups/:/docker-entrypoint-initdb.d/
    restart: on-failure
    stdin_open: true
    tty: true

  group-service:
    image: unige/group-service # use already built image that we've built from Maven
    container_name: group-service # name of container we'll see in docker ps
    ports:
      - "10080:8080" # port mapping from host to container port
    networks:
      - backend-network
    environment: # for thorntail
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_GROUPDS_CONNECTION_DASH_URL: "jdbc:postgresql://group-service-database:5432/group-service" # it should be the name of the database !
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_GROUPDS_DRIVER_DASH_NAME: 'postgresql'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_GROUPDS_USER_DASH_NAME: 'group-service'
      THORNTAIL_DATASOURCES_DATA_DASH_SOURCES_GROUPDS_PASSWORD: 'group-service'
    depends_on:
      - group-service-database

  tmdb-requests:
    image: unige/tmdb-requests # use already built image that we've built from Maven
    container_name: tmdb-requests # name of container we'll see in docker ps
    ports:
      - "10081:8080" # port mapping from host to container port
    networks:
      - backend-network
    # no database or not yet

networks:
  backend-network:
    driver: bridge

volumes:
  postgresql-db-group-service:

# to build/pull/use existing images and start containers, use:
# docker-compose -f docker-compose-microservices.yml up -d to build/pull/use existing images and start containers
# to stop and remove docker containers, use:
# docker-compose -f docker-compose-microservices.yml down