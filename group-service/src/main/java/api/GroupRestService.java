package api;

// Injection
// import javax.inject.Inject; // Need to understand what injection is
import javax.ws.rs.PathParam; // Need to understand more about what it is

import javax.ws.rs.Path;
import javax.ws.rs.core.Response;
import javax.ws.rs.GET;
import javax.ws.rs.Produces;

// MediaType
import javax.ws.rs.core.MediaType;

// List
import java.util.List;

//  import classes of domain
import domain.model.Group;

// service
import domain.service.GroupService;

// will be removed later
import domain.service.GroupServiceImpl;

// maybe add ApplicationScoped later
@Path("/groups")
public class GroupRestService {
    // Endpoint

    /*
    @Inject
    private GroupService groupService;
    */

    private GroupService groupService;

    public GroupRestService() {
        this.groupService=new GroupServiceImpl();
    }

    // hello world generated by Thorntail project generator.
    /*
    @GET
    @Produces("text/plain")
    public Response doGet() {
        return Response.ok("Hello from group-service!").build();
    }
    */

    // http://localhost:10080/groups
    // get a list of all groups in JSON
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<Group> getAllGroups() {
        return groupService.getAllGroups();
    }

    // http://localhost:10080/groups/{id}
    // get a particular group in JSON
    @GET
    @Path("{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getGroup(@PathParam("id") String id) {
        // need String instead of Integer otherwise we would have a conversion in the parameters !

        // check parameters
        if (id == null || !id.chars().allMatch(Character::isLetterOrDigit)) {
            //https://www.techiedelight.com/check-string-contains-alphanumeric-characters-java/#:~:text=The%20idea%20is%20to%20use,matches%20the%20given%20regular%20expression.

            return Response.status(Response.Status.BAD_REQUEST).build();
        }
        Group group=groupService.getGroup(id);
        if (group == null) { // group not found
            return Response.status(Response.Status.NOT_FOUND).build();
        }
        // group exists
        return Response.ok(group).build();

    }
    /*
    https://stackoverflow.com/questions/4687271/jax-rs-how-to-return-json-and-http-status-code-together
    https://docs.oracle.com/javaee/7/api/javax/ws/rs/core/Response.Status.html
    https://docs.oracle.com/javaee/7/api/javax/ws/rs/core/Response.html

    Just to try something : Response.ok(groupService.getGroup(id)).header("hello",42).build();
    */
}
